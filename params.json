{
  "name": "Lolfs",
  "tagline": "Container file / minimalistic filesystem",
  "body": "\r\n\r\n\r\n\tLiblolfs - Little Object List (LOL) filesystem - by Niko Kiiskinen\r\n                                      \r\n\r\n        Please see file 'INSTALL' for detailed installation instructions\r\n\r\n\r\n\r\nManifesto\r\n\r\n\r\n     I enjoy (re-)inventing wheels, here is another excr.. example.\r\n\r\n     Lolfs is a container file. It means that it is a file (stored\r\n     in your computer somewhere) which has other files inside it.\r\n\r\n     Once you create a lol container file (using the included\r\n     'mkfs.lolfs' utility or lol_mkfs API function), you can\r\n     then use the lolfs API explained in <lolfs.h> to create,\r\n     modify and delete files in this container.\r\n\r\n     The installation package also contains a program \"lol\",\r\n     which may be used to do the common file operations:\r\n\r\n\r\n\r\n    mkfs.lolfs program:\r\n    ===================\r\n\r\n\r\n                \"mkfs.lolfs\" creates a container file.\r\n\r\n\r\n                It takes 3 parameters:\r\n                - block size: the number of bytes a \"block\" has\r\n                              (this is a number which you can choose\r\n                               freely. Try to choose it as average file size\r\n                               to gain best performance).\r\n\r\n                - number of blocks: the number of data blocks. This depends\r\n                                    on how big container you want.\r\n                                    Try like 50000 first and try it\r\n\r\n                - filename: this is just the name which you like to use\r\n                            as the name of the container file. Ex:\r\n                            'mycontainer'\r\n\r\n                 Use like: \"mkfs.lolfs  100  5000  mycontainer\"\r\n\r\n                           ( This creates a container file 'mycontainer' which\r\n                             has 1000 * 5000 bytes of storage capacity ).\r\n\r\n\r\n                 ( In Linux, lolfs may be used directly with removable storage,\r\n                   without warranty of course!\r\n\r\n                   So, you may actually insert an SDHC card to your Linux\r\n                   and create a lol storage directly there. In that case the\r\n                   \"filename\" parameter is just the name of the device,\r\n                   for example \"mkfs.lolfs 512 4000000 /dev/sdb\"\r\n                   You MUST know what you are doing then, and of course\r\n                   you must be root to do that - or anything similar.\r\n                   You have been warned! :)\r\n\r\n\r\n    lol program:\r\n    ============\r\n\r\n                The \"lol\" app has a couple of built-in functions which\r\n                can be used to do some common file tasks.\r\n                These functions are currently (in v 0.12) :\r\n\r\n                - ls\r\n                - cp\r\n                - rm\r\n                - df\r\n                - cat\r\n\r\n                For example, if you want to list all the files\r\n                inside a container file \"mycontainer\", type:\r\n\r\n                lol ls mycontainer\r\n\r\n                So, use it like \"lol ls mycontainer\", where\r\n                \"mycontainer\" is the name of the container file\r\n\r\n                lol cp function:\r\n                ---------------\r\n\r\n                lol cp copies files to (and from) your container file.\r\n\r\n                 If you want to copy a file /home/you/readme.txt to your\r\n                 container file 'mycontainer', use:\r\n                 lol cp /home/you/readme.txt mycontainer\r\n\r\n                 If you want to copy a file which is inside the container\r\n                 back to your normal filesystem, use:\r\n\r\n                 lol cp mycontainer:/readme.txt /some/directory\r\n\r\n                 NOTE: When accessing files inside your container, you must\r\n                       separate the path with ':' like in above example.\r\n\r\n\r\n                 lol rm function:\r\n                 ---------------\r\n\r\n                lol rm   deletes a file from your container file.\r\n                         Use like: \"lol rm mycontainer:/readme.txt\"\r\n\r\n                 NOTE:   Note also here (this is common feature when accessing\r\n                         files inside a container), that you must separate\r\n                         the file with a ':' from it's container.\r\n\r\n\r\n                 lol df function:\r\n                 ---------------\r\n\r\n                 lol df  Shows how much space is used in container file.\r\n                         Use like: \"lol df mycontainer\"\r\n\r\n\r\n                 lol cat function:\r\n                 ----------------\r\n\r\n                 lol cat  Prints the contents of a file (inside a container)\r\n                          to standard output.\r\n                          Use like: \"lol cat mycontainer:/readme.txt\"\r\n                          Or like: \"lol cat mycontainer:/somefile > somefile.bak\"\r\n      \r\n\r\n\r\nlolfs API:\r\n==========\r\n\r\n     The API functions are explained in <lolfs.h>\r\n     They are identical to their standard C counterparts,\r\n     except the \"lol_\" prefix in the name:\r\n\r\n     - For example use \"lol_fopen\" to open a file inside\r\n       your container, it returns a lol_FILE* handle which\r\n       may then be used to lol_fread, lol_fwrite, lol_fseek etc..\r\n\r\n     - when you lol_fopen a file (or otherwise manipulate files inside\r\n       a container file, you must separate the filesystem path from the\r\n       file inside a container with a ':'\r\n\r\n     Example: Create a file \"test.txt\" inside container called 'mycontainer'.\r\n\r\n\r\n  #include <string.h>\r\n  #include <lolfs.h>\r\n\r\n  int main() {\r\n\r\n             lol_FILE *fp;\r\n             char text[] = \"Hello World!\\n\";\r\n\r\n             fp = lol_fopen(\"mycontainer:/test.txt\", \"w\");\r\n\r\n             lol_fwrite((char *)text, strlen(text), 1, fp);\r\n             lol_fclose(fp);\r\n             return 0;\r\n\r\n  }\r\n      \r\n\r\n  How to compile and link a lolfs enabled program:\r\n\r\n  gcc program.c -o program -llolfs\r\n\r\n  (You may need to include compiler option -L/path/to/librarydir\r\n   if the linker does not find lolfs library)\r\n  \r\nQuestions, Bug reports, etc..\r\n\r\n     Niko Kiiskinen\r\n     nkiiskin {at} yahoo com\r\n     https://github.com/nkiiskin/lolfs.git\r\nDistribution date: Sat Nov 12 00:18:36 EET 2016\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}